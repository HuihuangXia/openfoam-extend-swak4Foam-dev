/*---------------------------------------------------------------------------*\
 ##   ####  ######     |
 ##  ##     ##         | Copyright: ICE Stroemungsfoschungs GmbH
 ##  ##     ####       |
 ##  ##     ##         | http://www.ice-sf.at
 ##   ####  ######     |
-------------------------------------------------------------------------------
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright  held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is based on OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Class
    python3InterpreterWrapper

Description
    Makes sure that the object receives a python-Interpreter on its own

SourceFiles
    python3InterpreterWrapper.C

Contributors/Copyright:
    2011-2016 Bernhard F.W. Gschaider <bgschaid@hfd-research.com>

 SWAK Revision: $Id:  $
\*---------------------------------------------------------------------------*/

#ifndef python3InterpreterWrapper_H
#define python3InterpreterWrapper_H

#include "dictionary.H"
#include "objectRegistry.H"
#include "swakTime.H"

#include "Python.h"

#if PY_VERSION_HEX<0x03060000
#define OLD_PYTHON3
#endif

#include "generalInterpreterWrapperCRTP.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
                           Class python3InterpreterWrapper Declaration
\*---------------------------------------------------------------------------*/


class python3InterpreterWrapper
:
    public generalInterpreterWrapperCRTP<python3InterpreterWrapper>
{
    // Private Member Functions

    //- Disallow default bitwise copy construct
    python3InterpreterWrapper(const python3InterpreterWrapper&);

    //- Disallow default bitwise assignment
    void operator=(const python3InterpreterWrapper&);

    // Private data

    //- state of 'my' Python subinterpreter
    PyThreadState *pythonState_;

    //- remember the state of the gil
    PyGILState_STATE gilState_;

    void getGIL();

    void releaseGIL();

    //- whether or not to use the numpy library
    bool useNumpy_;

    //- whether or not to use IPython as the shell if it is installed
    bool useIPython_;

    //- whether or not we tried IPython
    bool triedIPython_;

    //- embed IPython using the old convention
    bool oldIPython_;

    void getGlobals();

    void setGlobals();

    void initIPython();

    void initInteractiveSpecial();

protected:
    //- how many instances exist (we need a separate interpreter for each of those)
    static label interpreterCount;
    static PyThreadState *mainThreadState;

    //- Execute after the python-code has been called
    void doAfterExecution(
        bool fail,
        const string &code,
        bool putVariables,
        bool failOnException=false
    );

    //- set the state to "my" interpreter
    void setInterpreter();

    //- release the state to "my" interpreter
    void releaseInterpreter();

    //- run an interactive sesssion
    void interactiveLoop(const string &banner);

    //- import a single library
    bool importLib(
        const word &name,
        const word &as="",
        bool useMainThreadStat=false
    );

    bool executeCodeInternal(
        const string &code
    );

    bool executeCodeCaptureOutputInternal(
        const string &code,
        string &stdout
    );

public:

    //- Execute code and return a value
    template <typename T,class Func>
    T evaluateCodeInternal(
        const string &code,
        bool &success
    );

    class toBool {
    public:
        bool operator()(PyObject *&pResult) {
            return PyObject_IsTrue(pResult);
        }
    };

    class toScalar {
    public:
        scalar operator()(PyObject *&pResult) {
            return PyFloat_AsDouble(pResult);
        }
    };

    class toLabel {
    public:
        label operator()(PyObject *&pResult) {
            return PyLong_AsLong(pResult);
        }
    };

    //- set up the environment with the basic variables
    void initEnvironment(const Time &t);

    //- set the variable 'runTime' in the interpreter
    void setRunTime(const Time &time);

    //- Runtime type information
    TypeName("python3InterpreterWrapper");


    // Constructors

    //- Construct from components
    python3InterpreterWrapper
    (
        const objectRegistry& obr,
        const dictionary&,
        bool forceToNamespace=false
    );

    virtual ~python3InterpreterWrapper();

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace Foam


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
