/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v3.0+                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     icoFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          1e-3;
// deltaT          0.25e-3;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

functions {
    solveTracer {
        type solveTransportPDE;
        solveAt timestep;
        fieldName movedField;
        outputControl timeStep;
        outputInterval 1;
        //    writeBeforeAfter true;
        steady false;
        rho "1" [0 0 0 0 0 0 0];
        diffusion "1e-6" [0 2 -1 0 0 0 0]; // [m^2/s];
        source "0" [0 0 -1 0 0 0 0];
        phi "interpolate(U) & face()" [0 3 -1 0 0 0 0]; // [m^3/s];
        //            relaxUnsteady true;
        relaxUnsteady false;
        makePhiRelative true;
        //        makePhiRelative false;
        //        velocityName U;
        velocityExpression "U" [0 1 -1 0 0 0 0];
    }
    solveSteadyTracer {
        $solveTracer;
        fieldName movedSteadyField;
        steady true;
        relaxLastIteration true;
        //        makePhiRelative false;
    }
    rhoField {
        type expressionField;
        fieldName pseudoRho;
        expression "1139.0";
        autowrite false;
    }
    muField {
        type expressionField;
        fieldName pseudoMu;
        expression "70.0";
        autowrite false;
    }
    staticUField {
        type expressionField;
        fieldName staticU;
        expression "vector(0,0,0)";
        autowrite false;
    }
    inletTransientParticle {
        type evolveKinematicCloud;
        cloudName transientInletCloud;
        g "down" [0 1 -2 0 0 0 0] (0 0 -9.81);
        rhoName pseudoRho;
        muName pseudoMu;
        UName U;

        autowrite true;
        ignore_unimplemented_EvolveCloudFunctionObject::movePoints true;
    }
    gridTransientParticle {
        $inletTransientParticle;
        cloudName transientGridCloud;
    }
    gridStaticParticle {
        $gridTransientParticle;
        cloudName staticGridCloud;
        UName staticU;
    }
}

libs (
    "libsimpleSwakFunctionObjects.so"
    "libswakFunctionObjects.so"
    "libsimpleLagrangianFunctionObjects.so"
    "libsimpleCloudFunctionObjects.so"
);

// ************************************************************************* //
