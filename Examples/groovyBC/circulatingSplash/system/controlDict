/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application interFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         2;

deltaT          0.00025;

writeControl    adjustableRunTime;  //timeStep; //adjustableRunTime;

writeInterval   0.002;   //10;  //0.02;

purgeWrite      0;

writeFormat     ascii;

writePrecision  7;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxAlphaCo           0.1;

maxCo           0.1;

maxDeltaT       0.00025;

functions {
//     makeReadHappy {
//         type addGlobalVariable;
//         outputControl timeStep;
//         outputInterval 1;
//         globalScope inletPosInit;
//         globalVariables {
//             inletCenter {
//                 valueType vector;
//                 value (0 0.1 0.05);
//             }
//             inletRadius {
//                 valueType scalar;
//                 value 0.005;
//             }
//         }
//     }
//     getAlpha {
//         type readFields;
//         outputControl timeStep;
//         outputInterval 1;
//         fields (
//             alpha1
//         )
//     }
    calculateInletVariables {
        type calculateGlobalVariables;
        outputControl timeStep;
        outputInterval 1;
        valueType patch;
        patchName atmosphere;
        toGlobalNamespace inletPos;
        toGlobalVariables (
            inletCenter
            inletRadius
            inletVelocity
        );
        variables (
            "r1=0.25*(max(pts().x)-min(pts().x));"
            "inletRadius=r1*0.2*(1-0.5*cos(54*time()));"
            "idealArea=inletRadius*inletRadius*pi;"
            //            "realArea=idealArea;"
            "realArea=sum(area()*alpha1);"
            "currentArea=0.5*(realArea+idealArea);"
            "targetMassFlow=5*0.005*0.005*pi;"
            "inletCenter=vector(r1*sin(10*time()),max(pos().y),r1*cos(15*time()));"
            "inletVelocity=targetMassFlow/currentArea;"
        );
    }
    printInletRadius {
        type swakExpression;
        expression "inletRadius";
        verbose true;
        accumulations (average );
        valueType patch;
        patchName atmosphere;
        globalScopes ( inletPos );        
    }
    printInletPosition {
        $printInletRadius;
        expression "inletCenter";
    }
    printInletVelocity {
        $printInletRadius;
        expression "inletVelocity";
    }
    divergenceArea {
        type swakExpression;
        variables (
            "idealArea=inletRadius*inletRadius*pi;"
            "realArea=sum(area()*alpha1);"
        );
        expression "realArea-idealArea";
        verbose true;
        accumulations (average );
        valueType patch;
        patchName atmosphere;
        globalScopes ( inletPos );        
    }
    idealArea {
        $divergenceArea;
        variables ();
        expression "inletRadius*inletRadius*pi";
    }
    totalInMassflow {
        type swakExpression;
        verbose true;
        accumulations (average );
        valueType patch;
        patchName atmosphere;
        variables (
            "totalIn=totalIn+sum(alpha1*mag(U)*area()*deltaT());"
        );
        expression "totalIn";
        storedVariables (
            {
                name totalIn;
                initialValue "0";
            }
        );
    }
    totalAlpha {
        type swakExpression;
        verbose true;
        accumulations ( sum );
        valueType internalField;
        expression "vol()*alpha1";
    }
}

libs ( 
    "libOpenFOAM.so" 
    "libgroovyBC.so" 
    "libswakFunctionObjects.so"
    "libsimpleSwakFunctionObjects.so"
    "libfieldFunctionObjects.so"
) ;

// ************************************************************************* //
